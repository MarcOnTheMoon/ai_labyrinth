<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.1">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>762</x>
      <y>312</y>
      <w>84</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>LabyrinthAgent
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>120</y>
      <w>246</w>
      <h>318</h>
    </coordinates>
    <panel_attributes>LabyrinthMachine
--
- __actions_dt: float
- __last_action_timestamp_sec: float
- __geometry: LabyrinthGeometry
- __rewardarea: LabyrinthRewardArea
- __servo: Servocommunication
- __x_degree: float
- __y_degree: float
- __app: App
- __position_factor: float
- __ball_start_position: list
- __destination_X: list
- __destination_y: list
- __action_to_angle_degree: list
- __number_actions_per_component: int
- __max_number_actions: int
- __number_actions: int
- __last_action_timestamp_sec: float
- __observation_space: numpy.ndarray
- __ball_position: list
- __last_ball_position: list
- __progress: int
- __right_direction: boolean
- __last_distance: float
- __current_distance: float
+ num_actions_per_component: int
--
- __init__(layout: String, cameraID = 0: int, actions_dt=0.1: float)
- __interim_reward(): boolean
- __zerohole_reward(): int
- __close_hole_discount(): boolean
+ reset(): numpy.ndarray, None
+ step(action: int): numpy.ndarray, float, boolean, boolean, int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>744</x>
      <y>540</y>
      <w>54</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>888</x>
      <y>282</y>
      <w>192</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>ServoCommunication
--
- __arduino: ArduinoCOM
- __channel: list
- __degree: list
--
- __init__(port=None: String)
- __write_angle(channel: int, degree: float): String
+ rotate_by_angle(x_degree=None: float, 
                              y_degree=None: float): String
+ rotate_to_angle(x_degree=None: float, 
                              y_degree=None: float): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>432</y>
      <w>24</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>702</x>
      <y>354</y>
      <w>198</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>786</x>
      <y>492</y>
      <w>294</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Imaging
--
- __blobDetector: cv2.SimpleBlobDetector
+ acquisition: ImageAcquisition
+ threshold = 125: int
+ frame: numpy.ndarray
+ image: numpy.ndarray
--
- __init__(cameraID: int)
- __initBlobDetector(minArea=100: int, maxArea:1750: int,
                                 minCircularity=0,6: float, maxCircularity=1.0: float): None
- __thresholdDilate(srcImage: numpy.ndarray): numpy.ndarray
- __blobDetection(binImage: numpy.ndarray): numpy.ndarray, float[2], float
+ close(): None
+ nextFrame(): numpy.ndarray, numpy.ndarray
+ detectBall(): numpy.ndarray, float[2], float
+ drawCircle(image: numpy.ndarray, center: float[2], radius: float, color: int[3], 
                     thickness: int): numpy.ndarray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>630</y>
      <w>258</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>GUI
--
- __app: App
--
- __init__(app: App)
- __close(): None
+ onMouseClick(event, x: int, y: int, flags, param:App): None
+ onTrackbarThreshold(value: int): None
+ showImages(cameraFrame: numpy.ndarray, 
                        labyrinthImage: numpy.ndarray): None
+ showImage(windowName: String, image: numpy.ndarray): None</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>618</x>
      <y>588</y>
      <w>24</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>696</y>
      <w>336</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>ImageAcquisition
--
- __camera: Camera
- __field: Dict
- __transformMatrix: numpy.ndarray
+ frame: numpy.ndarray
+ fieldImage: numpy.ndarray
--
- __init__(camera=1: int, width=3*274: int, height=3*228: int, isRotate180=True: boolean)
- __updatePerspectiveTransformation(): None
+ close(): None
+ changeSourceCorner(x: int, y: int): None
+ nextFrame(isDrawSourceROI=True: boolean): numpy.ndarray, numpy.ndarray
+ getfield(): int, int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>906</x>
      <y>654</y>
      <w>24</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>744</y>
      <w>126</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>Camera
--
- __camera: cv2.VideoCapture
+ width: float
+ height: float
--
- __init__(cameraID=1: int)
+ close():None
+ nextFrame(): numpy.ndarray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>582</x>
      <y>756</y>
      <w>174</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>270.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>798</x>
      <y>138</y>
      <w>282</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>ArduinoCOM
--
# _serial: serial.Serial
--
- __init__(serialCOM=None: int, baudRate=9600: int, 
               readTimeoutSec=30.0: float, terminateOnFailure=True: boolean)
+ isConnected(): boolean
+ close(): None
+ readLine(): String
+ writeData(data: String): boolean
# _connect(serialCOM: int, baudRate: int, readTimeoutSec: float): boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>978</x>
      <y>234</y>
      <w>24</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>462</x>
      <y>474</y>
      <w>288</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>App
--
- __framePeriodsMs=100: int
- __isShowImageAnalysis: boolean
- __ballCenter: list
- __ballRadius: int
+ imaging: Imaging
+ gui: GUI
--
- __init__(cameraID=1: int,fps=10: int, isShowImageAnalysis=True: boolean)
+ close(): None
+ run(): None
+ processNextFrame(): numpy.ndarray, float[2], float
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>702</x>
      <y>318</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>762</x>
      <y>420</y>
      <w>84</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>LabyrinthGeometry
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>762</x>
      <y>384</y>
      <w>90</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>LabyrinthRewardArea
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>702</x>
      <y>426</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>702</x>
      <y>390</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>762</x>
      <y>258</y>
      <w>84</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Arduino Application
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>798</x>
      <y>234</y>
      <w>18</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=-
</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
