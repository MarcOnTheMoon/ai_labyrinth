<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.0.0">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>395</x>
      <y>220</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>AppFunction
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>145</x>
      <y>115</y>
      <w>205</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>LabyrinthMachine
--
- __actions_dt: float
- __last_action_timestamp_sec: float
- __geometry: Geometry
- __rewards_rules: RewardsByAreas
- __servo: Servocommunication
- __x_degree: float
- __y_degree: float
- __app: App
- __position_factor: float
- __ball_start_position: list
- __destination_X: list
- __destination_y: list
- __action_to_angle_degree: list
- __number_actions_per_component: int
- __max_number_actions: int
- __number_actions: int
- __last_action_timestamp_sec: float
- __observation_space: numpy.ndarray
- __ball_position: list
- __last_ball_position: list
+ num_actions_per_component: int
--
- __init__(layout: String, cameraID = 0: int, actions_dt=0.1: float)
- __get_observation()
- __is_near_hole(): boolean
+ reset(): numpy.ndarray, None
+ step(action: int): numpy.ndarray, float, boolean, boolean, int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>380</x>
      <y>425</y>
      <w>45</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>210</y>
      <w>160</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>ServoCommunication
--
- __arduino: ArduinoCOM
- __channel: list
- __degree: list
--
- __init__(port=None: String)
- __write_angle(channel: int, degree: float): String
+ rotate_by_angle(x_degree=None: float, 
                              y_degree=None: float): String
+ rotate_to_angle(x_degree=None: float, 
                              y_degree=None: float): String</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>335</y>
      <w>20</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>250</y>
      <w>165</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>415</x>
      <y>385</y>
      <w>245</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>Imaging
--
- __blobDetector: cv2.SimpleBlobDetector
+ acquisition: ImageAcquisition
+ threshold = 125: int
+ frame: numpy.ndarray
+ image: numpy.ndarray
--
- __init__(cameraID: int)
- __initBlobDetector(minArea=100: int, maxArea:1750: int,
                                 minCircularity=0,6: float, maxCircularity=1.0: float): None
- __thresholdDilate(srcImage: numpy.ndarray): numpy.ndarray
- __blobDetection(binImage: numpy.ndarray): numpy.ndarray, float[2], float
+ close(): None
+ nextFrame(): numpy.ndarray, numpy.ndarray
+ detectBall(): numpy.ndarray, float[2], float
+ drawCircle(image: numpy.ndarray, center: float[2], radius: float, color: int[3], 
                     thickness: int): numpy.ndarray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>145</x>
      <y>500</y>
      <w>215</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>GUI
--
- __app: App
--
- __init__(app: App)
- __close(): None
+ onMouseClick(event, x: int, y: int, flags, param:App): None
+ onTrackbarThreshold(value: int): None
+ showImages(cameraFrame: numpy.ndarray, 
                        labyrinthImage: numpy.ndarray): None
+ showImage(windowName: String, image: numpy.ndarray): None</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>275</x>
      <y>465</y>
      <w>20</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>380</x>
      <y>555</y>
      <w>280</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>ImageAcquisition
--
- __camera: Camera
- __field: Dict
- __transformMatrix: numpy.ndarray
+ frame: numpy.ndarray
+ fieldImage: numpy.ndarray
--
- __init__(camera=1: int, width=3*274: int, height=3*228: int, isRotate180=True: boolean)
- __updatePerspectiveTransformation(): None
+ close(): None
+ changeSourceCorner(x: int, y: int): None
+ nextFrame(isDrawSourceROI=True: boolean): numpy.ndarray, numpy.ndarray
+ getfield(): int, int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>515</x>
      <y>520</y>
      <w>20</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>145</x>
      <y>595</y>
      <w>105</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>Camera
--
- __camera: cv2.VideoCapture
+ width: float
+ height: float
--
- __init__(cameraID=1: int)
+ close():None
+ nextFrame(): numpy.ndarray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>245</x>
      <y>605</y>
      <w>145</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>270.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>425</x>
      <y>90</y>
      <w>235</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>ArduinoCOM
--
# _serial: serial.Serial
--
- __init__(serialCOM=None: int, baudRate=9600: int, 
               readTimeoutSec=30.0: float, terminateOnFailure=True: boolean)
+ isConnected(): boolean
+ close(): None
+ readLine(): String
+ writeData(data: String): boolean
# _connect(serialCOM: int, baudRate: int, readTimeoutSec: float): boolean
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>575</x>
      <y>170</y>
      <w>20</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>145</x>
      <y>370</y>
      <w>240</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>App
--
- __framePeriodsMs=100: int
- __isShowImageAnalysis: boolean
- __ballCenter: list
- __ballRadius: int
+ imaging: Imaging
+ gui: GUI
--
- __init__(cameraID=1: int,fps=10: int, isShowImageAnalysis=True: boolean)
+ close(): None
+ run(): None
+ processNextFrame(): numpy.ndarray, float[2], float
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>225</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>395</x>
      <y>325</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Geometry
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>330</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>345</x>
      <y>300</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>395</x>
      <y>190</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>Arduino Application
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>425</x>
      <y>170</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>395</x>
      <y>295</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>RewardsByAreas
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>275</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>395</x>
      <y>260</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>/Rewards/
{abstract}
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
